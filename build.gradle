plugins {
    id "de.undercouch.download" version "5.5.0"
}

class FileRequirement {
    final def name
    final def serverType
    final def subDir
    final def url

    FileRequirement(name, serverType, subDir, url) {
        this.name = name
        this.serverType = serverType
        this.subDir = subDir
        this.url = url
    }
}

def required = List.of(
        new FileRequirement("paper", "spigot", null, "https://api.papermc.io/v2/projects/paper/versions/1.21.1/builds/33/downloads/paper-1.21.1-33.jar"),
        new FileRequirement("arclight", "spigot", null, "https://github.com/IzzelAliz/Arclight/releases/download/FeudalKings%2F1.0.0-SNAPSHOT/arclight-neoforge-1.21-1.0.0-SNAPSHOT.jar"),
        //new FileRequirement("placeholderapi", "spigot", "plugins", "https://www.spigotmc.org/resources/placeholderapi.6245/download?version=541946"),
        //new FileRequirement("luckperms", "spigot", "plugins", "https://www.spigotmc.org/resources/luckperms.28140/download?version=544174"),
        new FileRequirement("spark", "spigot", "mods", "https://cdn.modrinth.com/data/l6YH9Als/versions/mHuABI9W/spark-1.10.97-neoforge.jar"),

        new FileRequirement("fabric", "fabric", null, "https://meta.fabricmc.net/v2/versions/loader/1.20.1/0.16.7/1.0.1/server/jar"),
        //new FileRequirement("arclight", "fabric", null, "https://github.com/IzzelAliz/Arclight/releases/download/FeudalKings%2F1.0.0-SNAPSHOT/arclight-fabric-1.21-1.0.0-SNAPSHOT.jar"),
        new FileRequirement("fabric-api", "fabric", "mods", "https://cdn.modrinth.com/data/P7dR8mSH/versions/P7uGFii0/fabric-api-0.92.2%2B1.20.1.jar"),
        new FileRequirement("luckperms", "fabric", "mods", "https://cdn.modrinth.com/data/Vebnzrzj/versions/oLykW1F8/LuckPerms-Fabric-5.4.139.jar"),
        new FileRequirement("spark", "fabric", "mods", "https://cdn.modrinth.com/data/l6YH9Als/versions/qTSaozEL/spark-1.10.97-fabric.jar"),
)
def dlTasks = required.collect { req ->
    def taskName = "download${req.serverType.capitalize()}${req.name.replaceAll('-', '').capitalize()}Jar"
    def subDir = req.subDir == null ? "" : "/$req.subDir"
    tasks.register(taskName, Download).configure {
        src req.url
        dest "$rootDir/run/$req.serverType$subDir/${req.name}.jar"
    }
    return tasks.named(taskName)
}

tasks.register('downloadRequirements') {
    dependsOn dlTasks
}

subprojects.forEach { proj ->
    evaluationDependsOn proj.path

    if (proj.plugins.hasPlugin('java') && proj.name != 'japi')
        proj.sourceSets {
            main.java.srcDirs       = files("$proj.parent.name/src/$proj.name/main/java")
            main.resources.srcDirs  = files("$proj.parent.name/src/$proj.name/main/resources")
            test.java.srcDirs       = files("$proj.parent.name/src/$proj.name/test/java")
            test.resources.srcDirs  = files("$proj.parent.name/src/$proj.name/test/resources")
        }
}

void collectedPluginTask(String key, String type, String taskName) {
    def projects = allprojects.findAll { it.name == key }
    def relatedTasks = projects.collect { it.tasks.named(taskName).get() }
    relatedTasks.collect { task ->
        task.project.tasks.register("prepare${key.capitalize()}Test", Copy) {
            dependsOn task
            from task.collect { it.outputs.files.singleFile }
            into "$rootDir/run/$key/$type"
            rename { n -> "$task.project.parent.name-${key}.jar" }
        }
    }
}

evaluationDependsOnChildren()

collectedPluginTask('spigot', 'plugins', 'shadowJar')
collectedPluginTask('fabric', 'mods', 'remappedShadowJar')
/*
        .collect { source ->
            tasks.register("collectFrom${source.get().project.parent.name.capitalize()}${source.name.capitalize()}", Copy) {
                dependsOn source
                from source.collect { it.get().outputs.files.singleFile }
                into "$rootDir/build/collect"
                rename { n -> "${source.get().project.parent.name}-${key}.jar" }
            }
        }
tasks.register('collectEverything') {
    it.dependsOn = collectTasks
}
 */

subprojects {
    dependencies {
        // elevate LibMod parts
        for (String sub : new String[]{'api','core','spigot','forge','fabric'}) {
            print ":$parent.name:$project.name -> $sub: "
            if (parent.name != 'LibMod' && project.name == sub) {
                api project(':LibMod:' + sub)
                println 'yes'
            } else println 'no'
        }
        if (parent.name != 'LibMod' && project.name == 'api')
            compileOnly project(':LibMod:core')
    }
}

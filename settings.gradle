pluginManagement {
    repositories {
        mavenLocal()
        maven {
            name = 'comroid'
            url = 'https://maven.comroid.org'
        }
        maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net/'
        }
        gradlePluginPortal()
        mavenCentral()
    }

    includeBuild('japi')
    includeBuild('gradle') { name = 'buildscripts' }
}

buildscript {
    repositories {
        mavenLocal()
        maven {
            name = 'comroid'
            url = 'https://maven.comroid.org'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'de.undercouch:gradle-download-task:5.5.+'
        classpath 'fabric-loom:fabric-loom.gradle.plugin:1.9.+'
        classpath 'com.github.johnrengelman.shadow:com.github.johnrengelman.shadow.gradle.plugin:8.1.+'
        classpath 'org.gradle.toolchains.foojay-resolver:org.gradle.toolchains.foojay-resolver.gradle.plugin:0.9.+'
    }
}

rootProject.name = 'ModSuite'

apply plugin: 'org.gradle.toolchains.foojay-resolver'

boolean includeSubpart(var main, var sub) {
    def path = sub == null ? "./$main/" : "./$main/$sub/";
    if (!file(path).exists())
        return false
    def name = sub == null ? ":$main" : ":$main:$sub"
    include(name)
    project(name).projectDir = file(path)
    return true
}

void includeMod(var key) {
    if (!file("./$key/").exists())
        return
    boolean any = false
    // compile dependency modules
    //any = any | includeSubpart(key, 'compile-forge')
    any = any | includeSubpart(key, 'compile-fabric')

    // mod modules
    any = any | includeSubpart(key, 'api')
    any = any | includeSubpart(key, 'core')
    any = any | includeSubpart(key, 'spigot')
    //any = any | includeSubpart(key, 'forge')
    //any = any | includeSubpart(key, 'fabric')

    // extra modules
    any = any | includeSubpart(key, 'discord')
    any = any | includeSubpart(key, 'web')

    if (!any) // is single part mod
        includeSubpart(key, null)
}

def includeThirdparty(parent, name, path) {
    include(":$parent:$name")
    def thirdparty = project(":$parent:$name".toString())
    thirdparty.projectDir = file("./${parent.replace(':', File.separator)}/thirdparty/$path")
    //println "$thirdparty -> $thirdparty.projectDir"
    return thirdparty
}

includeMod('LibMod')

//includeMod('LagMod')

includeMod('BanMod')

includeMod('ChatMod')
includeThirdparty('ChatMod', 'AurionChat', 'AurionChat')
includeThirdparty('ChatMod', 'AurionChat:api', 'AurionChat/api')
includeThirdparty('ChatMod', 'AurionChat:common', 'AurionChat/common')
includeThirdparty('ChatMod', 'AurionChat:fabric', 'AurionChat/fabric')

includeMod('WorldMod')

//includeMod('ElectricMod')

includeMod('TestingBot')
